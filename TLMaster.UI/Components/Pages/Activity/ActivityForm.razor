@using AutoMapper
@using TLMaster.UI.Models.InputModels
@using TLMaster.UI.Providers
@using TLMaster.UI.Services

@inject ActivityService ActivityService
@inject NavigationManager NavigationManager
@inject UserProvider UserProvider
@inject IMapper Mapper

<GenericForm TInputModel="ActivityInputModel"
             InputModel="activityInput"
             Id="@ActivityId"
             ItemName="Activity"
             OnValidSubmit="HandleValidSubmit">
    <ChildContent>
        <div class="form-group">
            <label for="name">Nome</label>
            <InputText id="name" class="form-control" @bind-Value="activityInput.Name" />
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <InputText id="description" class="form-control" @bind-Value="activityInput.Description" />
        </div>

        <div>
            <label for="date">Escolha a data:</label>
            <InputDate id="date" class="form-control" @bind-Value="activityInput.DateTime" />

            <label for="time">Escolha a hora:</label>
            <InputText id="time" type="time" class="form-control" @bind-Value="_selectedTime" />
        </div>

        <div class="form-group">
            <label for="payout">Payout</label>
            <InputNumber id="payout" class="form-control" @bind-Value="activityInput.Payout" />
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <InputText type="password" id="password" class="form-control" @bind-Value="activityInput.Password" />
        </div>
    </ChildContent>
</GenericForm>

@code {
    [Parameter] public string? GuildId { get; set; }
    [Parameter] public string? ActivityId { get; set; }

    private ActivityInputModel activityInput = new ActivityInputModel();

    private string _selectedTime = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (ActivityId != null)
        {
            var activity = await ActivityService.GetByIdAsync(ActivityId);
            if (activity != null)
            {
                activityInput = Mapper.Map<ActivityInputModel>(activity);
            }
        }
        else
        {
            activityInput.DateTime = DateTime.Now;
        }
        _selectedTime = activityInput.DateTime.TimeOfDay.ToString(@"hh\:mm");
    }

    private async Task HandleValidSubmit()
    {
        if (TimeSpan.TryParse(_selectedTime, out var selectedTime))
        {
            activityInput.DateTime = (activityInput.DateTime.Date + selectedTime);
        }

        bool result;

        if (!string.IsNullOrEmpty(ActivityId))
        {
            GuildId = activityInput.GuildId;
            result = await ActivityService.UpdateAsync(ActivityId, activityInput);
        }
        else if (GuildId != null)
        {
            activityInput.GuildId = GuildId;
            result = await ActivityService.CreateAsync(activityInput);
        }

        NavigationManager.NavigateTo($"/{GuildId}/activities");
    }
}
