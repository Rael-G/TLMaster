@page "/activities/{ActivityId}"
@using TLMaster.UI.Model.Models
@using TLMaster.UI.Services
@using TLMaster.UI.Providers

@inject ActivityService ActivityService
@inject CharacterService CharacterService
@inject UserProvider UserProvider
@inject NavigationManager NavigationManager
@inject GuildService GuildService

<Details TItem="ActivityModel" TId="string"
         ItemName="Activity"
         Item="activity"
         GetItemName="@(a => a.Name)"
         NavigateToEdit="NavigateToEdit"
         DeleteItem="DeleteActivity">
    <ChildContent>
        <p><strong>Description:</strong> @context.Description</p>
        <p><strong>Payout:</strong> @context.Payout</p>
        <p><strong>Date:</strong> @context.DateTime.ToString()</p>

        <p><strong>Participants:</strong></p>

        @foreach (var party in parties)
        {
            <div class="mb-3">
                <h5>
                    <a href="/parties/@party.Id" class="text-decoration-none">@party.Name</a>
                </h5>

                <table class="table table-striped">
                    <tbody>
                        @foreach (var character in party.Characters)
                        {
                            <tr>
                                <td>
                                    <a href="/characters/@character.Id" class="text-decoration-none">@character.Name</a>
                                </td>
                                <td>
                                    @if (context.Participants.Any(c => c.Id == character.Id))
                                    {
                                        <span class="badge bg-success">Presente</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">Faltou</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        <h5>Completes:</h5>

        <table class="table table-striped">
            <tbody>
                @foreach (var character in guild.Members.Where(c => c.PartyId == null))
                {
                    <tr>
                        <td>
                            <a href="/characters/@character.Id" class="text-decoration-none">@character.Name</a>
                        </td>
                        <td>
                            @if (context.Participants.Any(c => c.Id == character.Id))
                            {
                                <span class="badge bg-success">Presente</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Faltou</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @if (userCharacters.Any())
        {
            <div class="form-group">
                <label for="character">Selecionar Personagem para Participar</label>
                <div class="d-flex">
                    <InputSelect id="character" class="form-control me-2" @bind-Value="selectedCharacterId">
                        @foreach (var character in userCharacters)
                        {
                            <option value="@character.Id">@character.Name</option>
                        }
                    </InputSelect>
                </div>
                
                <label for="password">Senha da Atividade</label>
                <InputText id="password" class="form-control me-2" @bind-Value="activityPassword" type="password" />

                <button type="button" class="btn btn-primary mt-2" @onclick="ParticipateInActivity">Participar</button>
            </div>
        }
    </ChildContent>
</Details>

@code {
    [Parameter] public string ActivityId { get; set; } = string.Empty;
    private ActivityModel? activity;
    private List<CharacterModel> userCharacters = new();
    private string? selectedCharacterId;
    private string activityPassword = string.Empty;
    private List<PartyModel> parties = [];
    private GuildModel guild;

    protected override async Task OnInitializedAsync()
    {
        activity = await ActivityService.GetByIdAsync(ActivityId);

        var user = await UserProvider.GetUser();
        if (user != null && activity != null)
        {
            userCharacters = user.Characters
                .Where(c => !activity.Participants.Any(p => p.Id == c.Id))
                .ToList();
        }
        selectedCharacterId = userCharacters.FirstOrDefault()?.Id;

        guild = await GuildService.GetByIdAsync(activity.GuildId);
        parties = guild.Parties;
        foreach (var party in parties)
        {
            party.Characters = guild.Members.Where(c => c.PartyId == party.Id).ToList();
        }
    }

    private void NavigateToEdit()
    {
        NavigationManager.NavigateTo($"/edit-activity/{ActivityId}");
    }

    private async Task DeleteActivity()
    {
        var result = await ActivityService.DeleteAsync(ActivityId);
        if (result)
        {
            NavigationManager.NavigateTo("/activities");
        }
    }

    private async Task ParticipateInActivity()
    {
        if (selectedCharacterId == null || string.IsNullOrWhiteSpace(activityPassword))
            return;

        var success = await ActivityService.Participate(ActivityId, selectedCharacterId, activityPassword);
        if (success)
        {
            var character = userCharacters.FirstOrDefault(c => c.Id == selectedCharacterId);
            if (character != null)
            {
                activity?.Participants.Add(character);
                userCharacters.Remove(character);
                selectedCharacterId = userCharacters.FirstOrDefault()?.Id;
            }
        }
    }
}
