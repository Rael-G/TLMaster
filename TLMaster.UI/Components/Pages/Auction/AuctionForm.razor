@using AutoMapper
@using TLMaster.UI.Model.Models
@using TLMaster.UI.Models.Enums
@using TLMaster.UI.Models.InputModels
@using TLMaster.UI.Providers
@using TLMaster.UI.Services

@inject AuctionService AuctionService
@inject GuildService GuildService
@inject NavigationManager NavigationManager
@inject UserProvider UserProvider
@inject IMapper Mapper

<GenericForm TInputModel="AuctionInputModel"
             InputModel="auctionInput"
             Id="@AuctionId"
             ItemName="Auction"
             OnValidSubmit="HandleValidSubmit">
    <ChildContent>
        <div class="form-group">
            <label for="item" class="form-label">Item</label>
            <InputSelect id="item" class="form-control" @bind-Value="auctionInput.ItemId">
                @foreach (var item in items)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="initialPrice" class="form-label">Initial Price</label>
            <InputNumber id="initialPrice" class="form-control" @bind-Value="auctionInput.BidStep" />
        </div>

        <div class="form-group">
            <label for="date" class="form-label">Start Date</label>
            <InputDate id="date" class="form-control" @bind-Value="auctionInput.StartTime" />
        </div>

        <div class="form-group">
            <label for="time" class="form-label">Start Time</label>
            <InputText id="time" type="time" class="form-control" @bind-Value="_selectedTime" />
        </div>

        <div class="form-group">
            <label for="duration" class="form-label">Duration (Hours)</label>
            <InputNumber id="duration" class="form-control" @bind-Value="hoursDuration" />
        </div>

        <div class="form-group">
            <label for="status" class="form-label">Auction Status</label>
            <InputSelect id="status" class="form-control" @bind-Value="auctionInput.Status">
                @foreach (var status in Enum.GetValues(typeof(AuctionStatus)))
                {
                    <option value="@status">@status</option>
                }
            </InputSelect>
        </div>

        <div class="form-group mt-4">
            <button type="submit" class="btn btn-primary w-100">
                @(AuctionId != null ? "Save Changes" : "Create Auction")
            </button>
        </div>
    </ChildContent>
</GenericForm>

@code {
    [Parameter] public string? GuildId { get; set; }
    [Parameter] public string? AuctionId { get; set; }

    private string _selectedTime = string.Empty;
    private int hoursDuration;

    private List<ItemModel> items = new List<ItemModel>();

    private AuctionInputModel auctionInput = new AuctionInputModel();

    protected override async Task OnInitializedAsync()
    {
        if (AuctionId != null)
        {
            var auction = await AuctionService.GetByIdAsync(AuctionId);
            if (auction != null)
            {
                auctionInput = Mapper.Map<AuctionInputModel>(auction);
            }
        }
        else
        {
            auctionInput.StartTime = DateTime.Now;
        }
        _selectedTime = auctionInput.StartTime.TimeOfDay.ToString(@"hh\:mm");

        var guildId = GuildId ?? auctionInput.GuildId;
        if (guildId != null)
        {
            var guild = await GuildService.GetByIdAsync(guildId);

            items = guild?.Items
                .Where(i => !guild.Auctions.Any(a => a.ItemId == i.Id))
                .ToList() ?? new List<ItemModel>();

            auctionInput.ItemId = items.FirstOrDefault()?.Id ?? string.Empty;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (TimeSpan.TryParse(_selectedTime, out var selectedTime))
        {
            auctionInput.StartTime = auctionInput.StartTime.Date + selectedTime;
            auctionInput.Duration = TimeSpan.FromHours(hoursDuration);
        }

        bool result;
        if (AuctionId != null)
        {
            GuildId = auctionInput.GuildId;
            result = await AuctionService.UpdateAsync(AuctionId, auctionInput);
        }
        else if (GuildId != null)
        {
            auctionInput.GuildId = GuildId;
            result = await AuctionService.CreateAsync(auctionInput);
        }

        NavigationManager.NavigateTo($"/{GuildId}/auctions");
    }
}
