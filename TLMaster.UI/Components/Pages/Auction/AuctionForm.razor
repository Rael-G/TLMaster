@using AutoMapper
@using TLMaster.UI.Model.Models
@using TLMaster.UI.Models.Enums
@using TLMaster.UI.Models.InputModels
@using TLMaster.UI.Providers
@using TLMaster.UI.Services

@inject AuctionService AuctionService
@inject GuildService GuildService
@inject NavigationManager NavigationManager
@inject UserProvider UserProvider
@inject IMapper Mapper

<GenericForm TInputModel="AuctionInputModel"
             InputModel="auctionInput"
             Id="@AuctionId"
             ItemName="Auction"
             OnValidSubmit="HandleValidSubmit">
    <ChildContent>
        <div class="form-group">
            <label for="item">Item</label>
            <InputSelect id="item" class="form-control" @bind-Value="auctionInput.ItemId">
                @foreach (var item in items)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="initialPrice">Initial Price</label>
            <InputNumber id="initialPrice" class="form-control" @bind-Value="auctionInput.InitialPrice" />
        </div>

        <div>
            <label for="dateTime">Escolha a data e hora de inicio:</label>
            <InputDate id="dateTime" class="form-control" @bind-Value="auctionInput.StartTime"></InputDate>
        </div>

        <div>
            <label>Duração (Horas)</label>
            <InputNumber @bind-Value="hours" />
        </div>

        <div class="form-group">
            <label for="status">Status</label>
            <InputSelect id="status" class="form-control" @bind-Value="auctionInput.Status">
                @foreach (var status in Enum.GetValues(typeof(AuctionStatus)))
                {
                    <option value="@status">@status</option>
                }
            </InputSelect>
        </div>
    </ChildContent>
</GenericForm>

@code {
    [Parameter] public string? GuildId { get; set; }
    [Parameter] public string? AuctionId { get; set; }

    private int hours;
    private List<ItemModel> items = [];

    private AuctionInputModel auctionInput = new AuctionInputModel();

    protected override async Task OnInitializedAsync()
    {
        if (AuctionId != null)
        {
            var auction = await AuctionService.GetByIdAsync(AuctionId);
            if (auction != null)
            {
                auctionInput = Mapper.Map<AuctionInputModel>(auction);
            }
        }

        var guildId = GuildId?? auctionInput.GuildId;  
        if (guildId != null)
        {
            var guild = await GuildService.GetByIdAsync(guildId);

            items = guild?.Items
                .Where(i => !guild.Auctions.Any(a => a.ItemId == i.Id))
                .ToList() ?? [];
            
            auctionInput.ItemId = items.FirstOrDefault()?.Id ?? string.Empty;
        }
    }

    private async Task HandleValidSubmit()
    {
        bool result;
        if (AuctionId != null)
        {
            GuildId = auctionInput.GuildId;
        }
        else if (GuildId != null)
        {
            auctionInput.GuildId = GuildId;
            result = await AuctionService.CreateAsync(auctionInput);
        }

        NavigationManager.NavigateTo($"/{GuildId}/auctions");
    }
}
