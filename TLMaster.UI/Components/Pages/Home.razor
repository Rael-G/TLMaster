@page "/"
@using System.Text.Json
@using TLMaster.UI.Models.Dtos
@using TLMaster.UI.Providers
@using TLMaster.UI.Services

@inject TokenProvider TokenProvider
@inject AuthService AuthService
@inject HttpClientProvider HttpClientProvider

<PageTitle>TLMaster</PageTitle>

<h1>TLMaster</h1>

@if(isAuthenticated)
{
     <p>Bem-vindo, </p>
    <button @onclick="Logout">Sair</button>
    <ul>
    @foreach(var guild in Guilds)
    {
        <li>
            @guild.Name
        </li>
    }
    </ul>
}
else
{
    <p>Você precisa fazer login.</p>
    <button @onclick="Login">Login com Discord</button>
}

@code {
    private bool isAuthenticated = false;
    private IEnumerable<GuildDto> Guilds = [];

    @* protected override async Task OnInitializedAsync()
    {

    } *@

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        isAuthenticated = await TokenProvider.GetAccessToken() is not null? true : false;

        if (firstRender)
        {
            Guilds = await GetGuilds();

            StateHasChanged();
        }
    }

    private void Login()
    {
        AuthService.Login();
    }

    private async Task Logout()
    {
        await AuthService.Logout();
    }

    private async Task<IEnumerable<GuildDto>> GetGuilds()
    {
        var client = HttpClientProvider.GetAuthenticatedClient();
        var response = await client.GetAsync("api/guild");
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var json = await response.Content.ReadAsStringAsync();
            var guilds = JsonSerializer.Deserialize<IEnumerable<GuildDto>>(json, 
                new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) 
                ?? [];
            return guilds;
        }
        else
        {
            Console.WriteLine(response.StatusCode);
            return [];
        }
    }
}
