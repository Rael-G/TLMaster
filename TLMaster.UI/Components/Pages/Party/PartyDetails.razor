@page "/parties/{PartyId}"
@using AutoMapper
@using TLMaster.UI.Model.Models
@using TLMaster.UI.Models.InputModels
@using TLMaster.UI.Services

@inject PartyService PartyService
@inject CharacterService CharacterService
@inject NavigationManager NavigationManager
@inject GuildService GuildService
@inject IMapper Mapper

<Details TItem="PartyModel" TId="string"
         ItemName="Party"
         Item="party"
         GetItemName="@(c => c.Name)"
         NavigateToEdit="NavigateToEdit"
         DeleteItem="DeleteParty">
    <ChildContent>
        <p><strong>Name:</strong> @context.Name</p>
        <p><strong>Id:</strong> @context.Id</p>

        <div class="form-group">
            <label for="character">Adicionar Personagem</label>
            @if(availableCharacters.Count > 0)
            {
                <div class="d-flex">
                <InputSelect id="character" class="form-control me-2" @bind-Value="selectedCharacterId">
                    @foreach (var character in availableCharacters)
                    {
                        <option value="@character.Id">@character.Name</option>
                    }
                </InputSelect>
                <button type="button" class="btn btn-primary" @onclick="AddCharacter">Adicionar</button>
                </div>
            }
            else
            {
                <p>Nenhum Membro disponiel.</p>
            }
            
        </div>

        <h5>Membros</h5>
        <ul class="list-group">
            @foreach (var character in party.Characters)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    @character.Name
                    <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveCharacter(character.Id)">Remover</button>
                </li>
            }
        </ul>
    </ChildContent>
</Details>

@code {
    [Parameter] public string PartyId { get; set; } = string.Empty;
    private PartyModel? party;

    private List<CharacterModel> availableCharacters = new();
    private string? selectedCharacterId;

    protected override async Task OnInitializedAsync()
    {
        party = await PartyService.GetByIdAsync(PartyId);

        if (party?.GuildId != null)
        {
            var guild = await GuildService.GetByIdAsync(party.GuildId);
            if (guild?.Members != null)
            {
                availableCharacters = guild.Members
                    .Where(c => c.PartyId == null)
                    .ToList();
                selectedCharacterId = availableCharacters.FirstOrDefault()?.Id;
            }
        }
    }

    private void NavigateToEdit()
    {
        NavigationManager.NavigateTo($"/edit-party/{PartyId}");
    }

    private async Task DeleteParty()
    {
        var result = await PartyService.DeleteAsync(PartyId);
        if (result)
        {
            NavigationManager.NavigateTo("/partys");
        }
    }

    private async Task AddCharacter()
    {
        var character = availableCharacters.First(c => c.Id == selectedCharacterId);
        character.PartyId = PartyId;
        var characterInput = Mapper.Map<CharacterInputModel>(character);

        if (await CharacterService.UpdateAsync(character.Id, characterInput))
        {
            availableCharacters.Remove(character);
            party.Characters.Add(character);
            selectedCharacterId = availableCharacters.FirstOrDefault()?.Id;
        }
    }

    private async Task RemoveCharacter(string characterId)
    {
        var character = party.Characters.First(c => c.Id == characterId);
        character.PartyId = null;
        
        var characterInput = Mapper.Map<CharacterInputModel>(character);
        if (await CharacterService.UpdateAsync(character.Id, characterInput))
        {
            availableCharacters.Add(character);
            party.Characters.Remove(character);
            selectedCharacterId = availableCharacters.FirstOrDefault()?.Id;
        }
    }
}