@using TLMaster.UI.Models.Enums
@using TLMaster.UI.Models.InputModels
@using TLMaster.UI.Providers
@using TLMaster.UI.Services

@inject CharacterService CharacterService
@inject NavigationManager NavigationManager
@inject UserProvider UserProvider

<GenericForm TInputModel="CharacterInputModel"
             InputModel="characterInput"
             Id="@CharacterId"
             ItemName="Charactera"
             OnValidSubmit="HandleValidSubmit">
    <ChildContent>
        <div class="form-group">
            <label for="name">Nome</label>
            <InputText id="name" class="form-control" @bind-Value="characterInput.Name" />
        </div>

        <div class="form-group">
            <label for="role">Função</label>
            <InputSelect id="role" class="form-control" @bind-Value="characterInput.Role">
                @foreach (var role in Enum.GetValues(typeof(Role)))
                {
                    <option value="@role">@role</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label>Weapons</label>
            <select class="form-control" @onchange="OnWeaponSelectionChanged" multiple>
                @foreach (var weapon in Enum.GetValues(typeof(Weapon)))
                {
                    <option value="@weapon">@weapon</option>
                }
            </select>
        </div>
    </ChildContent>
</GenericForm>

@code {
    [Parameter] public string? CharacterId { get; set; }

    private CharacterInputModel characterInput = new CharacterInputModel();

    protected override async Task OnInitializedAsync()
    {
        if (CharacterId != null)
        {
            var character = await CharacterService.GetByIdAsync(CharacterId);
            if (character != null)
            {
                characterInput = new CharacterInputModel
                {
                    Name = character.Name,
                    Role = character.Role,
                    Weapons = character.Weapons
                };
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        bool result;
        characterInput.UserId = await UserProvider.GetUserId();

        if (CharacterId != null)
        {
            result = await CharacterService.UpdateAsync(CharacterId, characterInput);
        }
        else
        {
            result = await CharacterService.CreateAsync(characterInput);
        }

        NavigationManager.NavigateTo("/characters");
    }

    private void OnWeaponSelectionChanged(ChangeEventArgs e)
    {
        characterInput.Weapons.Clear();
        var selectedValues = (string[]?)e.Value ?? [];

        foreach (var value in selectedValues)
        {
            if (Enum.TryParse(value, out Weapon parsedWeapon))
            {
                characterInput.Weapons.Add(parsedWeapon);
            }
        }
    }
}