@using AutoMapper
@using TLMaster.UI.Models.Enums
@using TLMaster.UI.Models.InputModels
@using TLMaster.UI.Providers
@using TLMaster.UI.Services

@inject CharacterService CharacterService
@inject NavigationManager NavigationManager
@inject UserProvider UserProvider
@inject IMapper Mapper

<GenericForm TInputModel="CharacterInputModel"
             InputModel="characterInput"
             Id="@CharacterId"
             ItemName="Character"
             OnValidSubmit="HandleValidSubmit">
    <ChildContent>
        <div class="form-group mb-4">
            <label for="name" class="form-label">Name</label>
            <InputText id="name" class="form-control" @bind-Value="characterInput.Name" placeholder="Enter character name" />
        </div>

        <div class="form-group mb-4">
            <label for="role" class="form-label">Role</label>
            <InputSelect id="role" class="form-control" @bind-Value="characterInput.Role">
                <option value="" disabled selected>Select Role</option>
                @foreach (var role in Enum.GetValues(typeof(Role)))
                {
                    <option value="@role">@role</option>
                }
            </InputSelect>
        </div>

        <div class="form-group mb-4">
            <label for="weapons" class="form-label">Weapons</label>
            <select id="weapons" class="form-control" @onchange="OnWeaponSelectionChanged" multiple>
                @foreach (var weapon in Enum.GetValues(typeof(Weapon)))
                {
                    <option value="@weapon">@weapon</option>
                }
            </select>
        </div>

        <div class="d-flex justify-content-between">
            <button type="submit" class="btn btn-primary w-48">
                @(CharacterId != null ? "Save Changes" : "Create Character")
            </button>
            <button type="button" class="btn btn-secondary w-48" @onclick="NavigateBack">
                Cancel
            </button>
        </div>
    </ChildContent>
</GenericForm>

@code {
    [Parameter] public string? CharacterId { get; set; }

    private CharacterInputModel characterInput = new CharacterInputModel();

    protected override async Task OnInitializedAsync()
    {
        if (CharacterId != null)
        {
            var character = await CharacterService.GetByIdAsync(CharacterId);
            if (character != null)
            {
                characterInput = Mapper.Map<CharacterInputModel>(character);
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        bool result;
        characterInput.UserId = await UserProvider.GetUserId() ?? string.Empty;

        if (CharacterId != null)
        {
            result = await CharacterService.UpdateAsync(CharacterId, characterInput);
        }
        else
        {
            result = await CharacterService.CreateAsync(characterInput);
        }

        NavigateBack();
    }

    private void OnWeaponSelectionChanged(ChangeEventArgs e)
    {
        characterInput.Weapons.Clear();
        var selectedValues = (string[]?)e.Value ?? Array.Empty<string>();

        foreach (var value in selectedValues)
        {
            if (Enum.TryParse(value, out Weapon parsedWeapon))
            {
                characterInput.Weapons.Add(parsedWeapon);
            }
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/characters");
    }
}
