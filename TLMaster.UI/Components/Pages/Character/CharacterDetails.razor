@page "/characters/{CharacterId}"
@using TLMaster.UI.Model.Models
@using TLMaster.UI.Services

@inject CharacterService CharacterService
@inject NavigationManager NavigationManager

<Details TItem="CharacterModel" TId="string"
         ItemName="Character"
         Item="character"
         GetItemName="@(c => c.Name)"
         NavigateToEdit="NavigateToEdit"
         DeleteItem="DeleteCharacter">
    <ChildContent>
        <p><strong>Role:</strong> @context.Role</p>
        <p><strong>Balance:</strong> @context.Balance.Amount</p>
        <p><strong>Guild:</strong>
            @if(context.Guild is not null)
            {
                <a href="/items/@context.Guild?.Id">@context.Guild?.Name</a>
            }
        </p>
        <ul>
            <li><strong>Weapons:</strong></li>
            @foreach (var w in context.Weapons)
            {
                <li>@w.ToString()</li>
            }
        </ul>

        <p><strong>Items:</strong></p>
        <ul>
            @foreach(var item in @context.Items)
            {
                <li>
                    <a href="/items/@item.Id">@item.Name</a> 
                </li>
            }
        </ul>
        <p><strong>Id:</strong> @context.Id</p>
    </ChildContent>
</Details>

@code {
    [Parameter] public string CharacterId { get; set; } = string.Empty;
    private CharacterModel? character;

    protected override async Task OnInitializedAsync()
    {
        character = await CharacterService.GetByIdAsync(CharacterId);
    }

    private void NavigateToEdit()
    {
        NavigationManager.NavigateTo($"/edit-character/{CharacterId}");
    }

    private async Task DeleteCharacter()
    {
        var result = await CharacterService.DeleteAsync(CharacterId);
        if (result)
        {
            NavigationManager.NavigateTo("/characters");
        }
    }
}