@page "/guilds/{GuildId}"
@using AutoMapper
@using TLMaster.UI.Model.Models
@using TLMaster.UI.Models.InputModels
@using TLMaster.UI.Providers
@using TLMaster.UI.Services

@inject UserProvider UserProvider
@inject GuildService GuildService
@inject CharacterService CharacterService
@inject NavigationManager NavigationManager
@inject IMapper Mapper

@if (guild is null)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="container my-5">
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h4 class="mb-0">@guild.Name</h4>
                <div class="btn-group">
                    <a href="@guild.Id/auctions/" class="btn btn-outline-light">Auctions</a>
                    <a href="@guild.Id/parties/" class="btn btn-outline-light">Parties</a>
                    <a href="@guild.Id/items/" class="btn btn-outline-light">Items</a>
                    <a href="@guild.Id/activities/" class="btn btn-outline-light">Activities</a>
                </div>
            </div>
            <div class="card-body">
                <p class="card-text"><strong>Description:</strong> @guild.Description</p>
                <p class="card-text"><strong>Guild Master:</strong> @guild.GuildMaster.UserName</p>

                @if (userCharacters.Any())
                {
                    <div class="mb-4">
                        <label for="character" class="form-label">Select Character to Apply</label>
                        <div class="input-group">
                            <InputSelect id="character" class="form-control" @bind-Value="selectedCharacterId">
                                @foreach (var character in userCharacters)
                                {
                                    <option value="@character.Id">@character.Name</option>
                                }
                            </InputSelect>
                            <button type="button" class="btn btn-primary" @onclick="ApplyToGuild">Apply</button>
                        </div>
                    </div>
                }

                <div class="mb-4">
                    <h6><strong>Applicants:</strong></h6>
                    <ul class="list-unstyled">
                        @foreach (var applicant in guild.Applicants)
                        {
                            <li class="d-flex justify-content-between align-items-center mb-2">
                                <a href="/characters/@applicant.Id">@applicant.Name</a>
                                <div>
                                    <button class="btn btn-success btn-sm" @onclick="() => AcceptMember(applicant.Id)">Accept</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => RejectMember(applicant.Id)">Reject</button>
                                </div>
                            </li>
                        }
                    </ul>
                </div>

                <div class="mb-4">
                    <h6><strong>Members:</strong></h6>
                    <ul class="list-unstyled">
                        @foreach (var member in guild.Members)
                        {
                            <li class="d-flex justify-content-between align-items-center mb-2">
                                <a href="/characters/@member.Id">@member.Name</a>
                                <button class="btn btn-danger btn-sm" @onclick="() => RemoveMember(member.Id)">Remove</button>
                            </li>
                        }
                    </ul>
                </div>

                <div class="mb-4">
                    <h6><strong>Staff:</strong></h6>
                    <ul class="list-unstyled">
                        @foreach (var staff in guild.Staff)
                        {
                            <li>
                                <a href="/users/@staff.Id">@staff.UserName</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string GuildId { get; set; } = string.Empty;
    private GuildModel? guild;
    private List<CharacterModel> userCharacters = new();
    private string? selectedCharacterId;

    protected override async Task OnInitializedAsync()
    {
        guild = await GuildService.GetByIdAsync(GuildId);

        var user = await UserProvider.GetUser();
        if (user != null && guild != null)
        {
            userCharacters = user.Characters
                .Where(c => c.GuildId == null && !guild.Applicants.Any(a => a.Id == c.Id))
                .ToList();
        }
        selectedCharacterId = userCharacters.FirstOrDefault()?.Id;
    }

    private void NavigateToEdit()
    {
        NavigationManager.NavigateTo($"/edit-guild/{GuildId}");
    }

    private async Task DeleteGuild()
    {
        var result = await GuildService.DeleteAsync(GuildId);
        if (result)
        {
            NavigationManager.NavigateTo("/guilds");
        }
    }

    private async Task ApplyToGuild()
    {
        if (selectedCharacterId == null)
            return;

        var character = await CharacterService.GetByIdAsync(selectedCharacterId);
        var characterInput = Mapper.Map<CharacterInputModel>(character);
        characterInput.ApplicationIds.Add(GuildId);

        var success = await CharacterService.UpdateAsync(selectedCharacterId, characterInput);
        if (success)
        {
            userCharacters.RemoveAll(c => c.Id == selectedCharacterId);
            selectedCharacterId = userCharacters.FirstOrDefault()?.Id;
            if (character != null) guild?.Applicants.Add(character);
        }
    }

    private async Task AcceptMember(string applicantId)
    {
        var success = await GuildService.AcceptMember(GuildId, applicantId);
        if (success)
        {
            var applicant = guild?.Applicants.FirstOrDefault(c => c.Id == applicantId);
            if (applicant is not null)
            {
                guild?.Applicants.Remove(applicant);
                guild?.Members.Add(applicant);
            }
        }
    }

    private async Task RejectMember(string applicantId)
    {
        var success = await GuildService.RejectMember(GuildId, applicantId);
        if (success)
        {
            var applicant = guild?.Applicants.FirstOrDefault(c => c.Id == applicantId);
            guild?.Applicants.Remove(applicant);
            userCharacters.Add(applicant);
            selectedCharacterId = applicant.Id;
        }
    }

    private async Task RemoveMember(string memberId)
    {
        var success = await GuildService.RemoveMember(GuildId, memberId);
        if (success)
        {
            var member = guild?.Members.FirstOrDefault(c => c.Id == memberId);
            guild?.Members.Remove(member);
            userCharacters.Add(member);
            selectedCharacterId = member.Id;
        }
    }
}
