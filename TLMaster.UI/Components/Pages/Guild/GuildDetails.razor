@page "/guilds/{GuildId}"
@using AutoMapper
@using TLMaster.UI.Model.Models
@using TLMaster.UI.Models.InputModels
@using TLMaster.UI.Providers
@using TLMaster.UI.Services

@inject UserProvider UserProvider
@inject GuildService GuildService
@inject CharacterService CharacterService
@inject NavigationManager NavigationManager
@inject IMapper Mapper

<Details TItem="GuildModel" TId="string"
         ItemName="Guild"
         Item="guild"
         GetItemName="@(c => c.Name)"
         NavigateToEdit="NavigateToEdit"
         DeleteItem="DeleteGuild">
    <ChildContent>
        <p><strong>Descrição:</strong> @context.Description</p>
        <p><strong>Guild Master:</strong> @context.GuildMaster.UserName</p>
        <p><strong>Id:</strong> @context.Id</p>

        @if (userCharacters.Any())
        {
            <div class="form-group">
                <label for="character">Selecionar Personagem para Aplicar</label>
                <div class="d-flex">
                    <InputSelect id="character" class="form-control me-2" @bind-Value="selectedCharacterId">
                        @foreach (var character in userCharacters)
                        {
                            <option value="@character.Id">@character.Name</option>
                        }
                    </InputSelect>
                    <button type="button" class="btn btn-primary" @onclick="ApplyToGuild">Aplicar</button>
                </div>
            </div>
        }

        <p><strong>Applicants:</strong></p>
        <ul>
            @foreach(var applicant in @context.Applicants)
            {
                <li>
                    <a href="/characters/@applicant.Id">@applicant.Name</a> 
                    <button class="btn btn-success" @onclick="() => AcceptMember(applicant.Id)">Accept</button>
                    <button class="btn btn-danger" @onclick="() => RejectMember(applicant.Id)">Reject</button>
                </li>
            }
        </ul>

        <p><strong>Members:</strong></p>
        <ul>
            @foreach(var member in @context.Members)
            {
                <li>
                    <a href="/characters/@member.Id">@member.Name</a> 
                    <button class="btn btn-danger" @onclick="() => RemoveMember(member.Id)">Remove</button>
                </li>
            }
        </ul>

        <a href="@context.Id/auctions/">Auctions</a>
        <a href="@context.Id/parties/">Parties</a>
        <a href="@context.Id/items/">Items</a>
        <a href="@context.Id/activities/">Activities</a>

        <p><strong>Staff:</strong></p>
        <ul>
            @foreach(var staff in @context.Staff)
            {
                <li>
                    <a href="/users/@staff.Id">@staff.UserName</a> 
                </li>
            }
        </ul>
    </ChildContent>
</Details>

@code {
    [Parameter] public string GuildId { get; set; } = string.Empty;
    private GuildModel? guild;
    private List<CharacterModel> userCharacters = new();
    private string? selectedCharacterId;

    protected override async Task OnInitializedAsync()
    {
        guild = await GuildService.GetByIdAsync(GuildId);

        var user = await UserProvider.GetUser();
        if (user != null && guild != null)
        {
            userCharacters = user.Characters
                .Where(c => c.GuildId == null && !guild.Applicants.Any(a => a.Id == c.Id))
                .ToList();
        }
        selectedCharacterId = userCharacters.FirstOrDefault()?.Id;
    }

    private void NavigateToEdit()
    {
        NavigationManager.NavigateTo($"/edit-guild/{GuildId}");
    }

    private async Task DeleteGuild()
    {
        var result = await GuildService.DeleteAsync(GuildId);
        if (result)
        {
            NavigationManager.NavigateTo("/guilds");
        }
    }

    private async Task ApplyToGuild()
    {
        if (selectedCharacterId == null)
            return;

        var character = await CharacterService.GetByIdAsync(selectedCharacterId);
        var characterInput = Mapper.Map<CharacterInputModel>(character);
        characterInput.ApplicationIds.Add(GuildId);
        
        var success = await CharacterService.UpdateAsync(selectedCharacterId, characterInput);
        if (success)
        {
            userCharacters.RemoveAll(c => c.Id == selectedCharacterId);
            selectedCharacterId = userCharacters.FirstOrDefault()?.Id;
            if (character != null) guild?.Applicants.Add(character);
        }
    }

    private async Task AcceptMember(string applicantId)
    {
        var success = await GuildService.AcceptMember(GuildId, applicantId);
        if (success)
        {
            var applicant = guild?.Applicants.Where(c => c.Id == applicantId).FirstOrDefault();
            if (applicant is not null)
            {
                guild?.Applicants.Remove(applicant);
                guild?.Members.Add(applicant);
            }
        }
    }

    private async Task RejectMember(string applicantId)
    {
        var success = await GuildService.RejectMember(GuildId, applicantId);
        if (success)
        {
            var applicant = guild?.Applicants.Where(c => c.Id == applicantId).FirstOrDefault();
            guild?.Applicants.Remove(applicant);
            userCharacters.Add(applicant);
            selectedCharacterId = applicant.Id;
        }
    }

    private async Task RemoveMember(string memberId)
    {
        var success = await GuildService.RemoveMember(GuildId, memberId);
        if (success)
        {
            var member = guild?.Members.Where(c => c.Id == memberId).FirstOrDefault();
            guild?.Members.Remove(member);
            userCharacters.Add(member);
            selectedCharacterId = member.Id;
        }   
    }
}
