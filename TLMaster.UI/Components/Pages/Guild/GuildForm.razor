@using TLMaster.UI.Models.InputModels
@using TLMaster.UI.Providers
@using TLMaster.UI.Services

@inject GuildService GuildService
@inject NavigationManager NavigationManager
@inject UserProvider UserProvider

<h3>@(GuildId.HasValue ? "Editar Guilda" : "Criar Guilda")</h3>

<EditForm Model="@guildInput" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Nome</label>
        <InputText id="name" class="form-control" @bind-Value="guildInput.Name" />
    </div>

    <div class="form-group">
        <label for="description">Descrição</label>
        <InputTextArea id="description" class="form-control" @bind-Value="guildInput.Description" />
    </div>

    <button type="submit" class="btn btn-primary">
        @(GuildId.HasValue ? "Salvar Alterações" : "Criar Guilda")
    </button>
</EditForm>

@code {
    [Parameter] public Guid? GuildId { get; set; }

    private GuildInputModel guildInput = new GuildInputModel();

    protected override async Task OnInitializedAsync()
    {
        if (GuildId.HasValue)
        {
            var guild = await GuildService.GetByIdAsync(GuildId.Value);
            if (guild != null)
            {
                guildInput = new GuildInputModel
                {
                    Name = guild.Name,
                    Description = guild.Description
                };
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        bool result;
        var stringId = await UserProvider.GetUserId();    
        Guid.TryParse(stringId, out var guid);
        guildInput.GuildMasterId = guid;

        if (GuildId.HasValue)
        {
            
            result = await GuildService.UpdateAsync(GuildId.Value, guildInput);
        }
        else
        {
            result = await GuildService.CreateAsync(guildInput);
        }

        NavigationManager.NavigateTo("/guilds");
    }
}
